/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// APIServerLoadBalancerApplyConfiguration represents a declarative configuration of the APIServerLoadBalancer type for use
// with apply.
type APIServerLoadBalancerApplyConfiguration struct {
<<<<<<< HEAD
	Enabled           *bool                                           `json:"enabled,omitempty"`
	AdditionalPorts   []int                                           `json:"additionalPorts,omitempty"`
	AllowedCIDRs      []string                                        `json:"allowedCIDRs,omitempty"`
	Provider          *string                                         `json:"provider,omitempty"`
	Network           *NetworkParamApplyConfiguration                 `json:"network,omitempty"`
	Subnets           []SubnetParamApplyConfiguration                 `json:"subnets,omitempty"`
	AvailabilityZone  *string                                         `json:"availabilityZone,omitempty"`
	AvailabilityZones []string                                        `json:"availabilityZones,omitempty"`
	Flavor            *string                                         `json:"flavor,omitempty"`
	Monitor           *APIServerLoadBalancerMonitorApplyConfiguration `json:"monitor,omitempty"`
=======
	Enabled                         *bool                               `json:"enabled,omitempty"`
	AdditionalPorts                 []int                               `json:"additionalPorts,omitempty"`
	AllowedCIDRs                    []string                            `json:"allowedCIDRs,omitempty"`
	Provider                        *string                             `json:"provider,omitempty"`
	Network                         *NetworkParamApplyConfiguration     `json:"network,omitempty"`
	Subnets                         []SubnetParamApplyConfiguration     `json:"subnets,omitempty"`
	AvailabilityZone                *string                             `json:"availabilityZone,omitempty"`
	AvailabilityZones               []string                            `json:"availabilityZones,omitempty"`
	AvailabilityZoneSubnets         []AZSubnetMappingApplyConfiguration `json:"availabilityZoneSubnets,omitempty"`
	Flavor                          *string                             `json:"flavor,omitempty"`
	AllowCrossAZLoadBalancerMembers *bool                               `json:"allowCrossAZLoadBalancerMembers,omitempty"`
>>>>>>> adb9a7be (fix: api validation)
}

// APIServerLoadBalancerApplyConfiguration constructs a declarative configuration of the APIServerLoadBalancer type for use with
// apply.
func APIServerLoadBalancer() *APIServerLoadBalancerApplyConfiguration {
	return &APIServerLoadBalancerApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *APIServerLoadBalancerApplyConfiguration) WithEnabled(value bool) *APIServerLoadBalancerApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithAdditionalPorts adds the given value to the AdditionalPorts field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalPorts field.
func (b *APIServerLoadBalancerApplyConfiguration) WithAdditionalPorts(values ...int) *APIServerLoadBalancerApplyConfiguration {
	for i := range values {
		b.AdditionalPorts = append(b.AdditionalPorts, values[i])
	}
	return b
}

// WithAllowedCIDRs adds the given value to the AllowedCIDRs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllowedCIDRs field.
func (b *APIServerLoadBalancerApplyConfiguration) WithAllowedCIDRs(values ...string) *APIServerLoadBalancerApplyConfiguration {
	for i := range values {
		b.AllowedCIDRs = append(b.AllowedCIDRs, values[i])
	}
	return b
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *APIServerLoadBalancerApplyConfiguration) WithProvider(value string) *APIServerLoadBalancerApplyConfiguration {
	b.Provider = &value
	return b
}

// WithNetwork sets the Network field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Network field is set to the value of the last call.
func (b *APIServerLoadBalancerApplyConfiguration) WithNetwork(value *NetworkParamApplyConfiguration) *APIServerLoadBalancerApplyConfiguration {
	b.Network = value
	return b
}

// WithSubnets adds the given value to the Subnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Subnets field.
func (b *APIServerLoadBalancerApplyConfiguration) WithSubnets(values ...*SubnetParamApplyConfiguration) *APIServerLoadBalancerApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSubnets")
		}
		b.Subnets = append(b.Subnets, *values[i])
	}
	return b
}

// WithAvailabilityZone sets the AvailabilityZone field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AvailabilityZone field is set to the value of the last call.
func (b *APIServerLoadBalancerApplyConfiguration) WithAvailabilityZone(value string) *APIServerLoadBalancerApplyConfiguration {
	b.AvailabilityZone = &value
	return b
}

// WithAvailabilityZones adds the given value to the AvailabilityZones field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailabilityZones field.
func (b *APIServerLoadBalancerApplyConfiguration) WithAvailabilityZones(values ...string) *APIServerLoadBalancerApplyConfiguration {
	for i := range values {
		b.AvailabilityZones = append(b.AvailabilityZones, values[i])
	}
	return b
}

// WithAvailabilityZoneSubnets adds the given value to the AvailabilityZoneSubnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AvailabilityZoneSubnets field.
func (b *APIServerLoadBalancerApplyConfiguration) WithAvailabilityZoneSubnets(values ...*AZSubnetMappingApplyConfiguration) *APIServerLoadBalancerApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAvailabilityZoneSubnets")
		}
		b.AvailabilityZoneSubnets = append(b.AvailabilityZoneSubnets, *values[i])
	}
	return b
}

// WithFlavor sets the Flavor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Flavor field is set to the value of the last call.
func (b *APIServerLoadBalancerApplyConfiguration) WithFlavor(value string) *APIServerLoadBalancerApplyConfiguration {
	b.Flavor = &value
	return b
}

<<<<<<< HEAD
// WithMonitor sets the Monitor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Monitor field is set to the value of the last call.
func (b *APIServerLoadBalancerApplyConfiguration) WithMonitor(value *APIServerLoadBalancerMonitorApplyConfiguration) *APIServerLoadBalancerApplyConfiguration {
	b.Monitor = value
=======
// WithAllowCrossAZLoadBalancerMembers sets the AllowCrossAZLoadBalancerMembers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AllowCrossAZLoadBalancerMembers field is set to the value of the last call.
func (b *APIServerLoadBalancerApplyConfiguration) WithAllowCrossAZLoadBalancerMembers(value bool) *APIServerLoadBalancerApplyConfiguration {
	b.AllowCrossAZLoadBalancerMembers = &value
>>>>>>> adb9a7be (fix: api validation)
	return b
}
