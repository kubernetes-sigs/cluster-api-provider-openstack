/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

// CommonPortOptsApplyConfiguration represents a declarative configuration of the CommonPortOpts type for use
// with apply.
type CommonPortOptsApplyConfiguration struct {
	Network                                  *NetworkParamApplyConfiguration        `json:"network,omitempty"`
	Description                              *string                                `json:"description,omitempty"`
	NameSuffix                               *string                                `json:"nameSuffix,omitempty"`
	FixedIPs                                 []FixedIPApplyConfiguration            `json:"fixedIPs,omitempty"`
	SecurityGroups                           []SecurityGroupParamApplyConfiguration `json:"securityGroups,omitempty"`
	Tags                                     []string                               `json:"tags,omitempty"`
	ResolvedPortSpecFieldsApplyConfiguration `json:",inline"`
}

// CommonPortOptsApplyConfiguration constructs a declarative configuration of the CommonPortOpts type for use with
// apply.
func CommonPortOpts() *CommonPortOptsApplyConfiguration {
	return &CommonPortOptsApplyConfiguration{}
}

// WithNetwork sets the Network field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Network field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithNetwork(value *NetworkParamApplyConfiguration) *CommonPortOptsApplyConfiguration {
	b.Network = value
	return b
}

// WithDescription sets the Description field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Description field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithDescription(value string) *CommonPortOptsApplyConfiguration {
	b.Description = &value
	return b
}

// WithNameSuffix sets the NameSuffix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NameSuffix field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithNameSuffix(value string) *CommonPortOptsApplyConfiguration {
	b.NameSuffix = &value
	return b
}

// WithFixedIPs adds the given value to the FixedIPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the FixedIPs field.
func (b *CommonPortOptsApplyConfiguration) WithFixedIPs(values ...*FixedIPApplyConfiguration) *CommonPortOptsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFixedIPs")
		}
		b.FixedIPs = append(b.FixedIPs, *values[i])
	}
	return b
}

// WithSecurityGroups adds the given value to the SecurityGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecurityGroups field.
func (b *CommonPortOptsApplyConfiguration) WithSecurityGroups(values ...*SecurityGroupParamApplyConfiguration) *CommonPortOptsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSecurityGroups")
		}
		b.SecurityGroups = append(b.SecurityGroups, *values[i])
	}
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *CommonPortOptsApplyConfiguration) WithTags(values ...string) *CommonPortOptsApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithAdminStateUp sets the AdminStateUp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AdminStateUp field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithAdminStateUp(value bool) *CommonPortOptsApplyConfiguration {
	b.ResolvedPortSpecFieldsApplyConfiguration.AdminStateUp = &value
	return b
}

// WithMACAddress sets the MACAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MACAddress field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithMACAddress(value string) *CommonPortOptsApplyConfiguration {
	b.ResolvedPortSpecFieldsApplyConfiguration.MACAddress = &value
	return b
}

// WithAllowedAddressPairs adds the given value to the AllowedAddressPairs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllowedAddressPairs field.
func (b *CommonPortOptsApplyConfiguration) WithAllowedAddressPairs(values ...*AddressPairApplyConfiguration) *CommonPortOptsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithAllowedAddressPairs")
		}
		b.ResolvedPortSpecFieldsApplyConfiguration.AllowedAddressPairs = append(b.ResolvedPortSpecFieldsApplyConfiguration.AllowedAddressPairs, *values[i])
	}
	return b
}

// WithHostID sets the HostID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HostID field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithHostID(value string) *CommonPortOptsApplyConfiguration {
	b.ResolvedPortSpecFieldsApplyConfiguration.HostID = &value
	return b
}

// WithVNICType sets the VNICType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VNICType field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithVNICType(value string) *CommonPortOptsApplyConfiguration {
	b.ResolvedPortSpecFieldsApplyConfiguration.VNICType = &value
	return b
}

// WithProfile sets the Profile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Profile field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithProfile(value *BindingProfileApplyConfiguration) *CommonPortOptsApplyConfiguration {
	b.ResolvedPortSpecFieldsApplyConfiguration.Profile = value
	return b
}

// WithDisablePortSecurity sets the DisablePortSecurity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DisablePortSecurity field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithDisablePortSecurity(value bool) *CommonPortOptsApplyConfiguration {
	b.ResolvedPortSpecFieldsApplyConfiguration.DisablePortSecurity = &value
	return b
}

// WithPropagateUplinkStatus sets the PropagateUplinkStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PropagateUplinkStatus field is set to the value of the last call.
func (b *CommonPortOptsApplyConfiguration) WithPropagateUplinkStatus(value bool) *CommonPortOptsApplyConfiguration {
	b.ResolvedPortSpecFieldsApplyConfiguration.PropagateUplinkStatus = &value
	return b
}

// WithValueSpecs adds the given value to the ValueSpecs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ValueSpecs field.
func (b *CommonPortOptsApplyConfiguration) WithValueSpecs(values ...*ValueSpecApplyConfiguration) *CommonPortOptsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithValueSpecs")
		}
		b.ResolvedPortSpecFieldsApplyConfiguration.ValueSpecs = append(b.ResolvedPortSpecFieldsApplyConfiguration.ValueSpecs, *values[i])
	}
	return b
}
